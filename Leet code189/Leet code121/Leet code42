//189
class Solution {
    public void rotate(int[] nums,int k){
        k%=nums.length;
        reverse(nums,0,n-1);
        reverse(nums,0,k-1);
        reverse(nums,k,n-1);
    }
    public void rotate(int[] nums, int i,int j) {
        while(i<j){
        int temp=nums[i];
        nums[i]=nums[j];
        nums[j]=temp;
        i++;j--;
        }
    }
}

//121
//most optimal solution//
class Solution {
    public int maxProfit(int[] prices) {
        int maxprice=0;
        int currprofit=0;
        int buyAt=prices[0];
        for(int i=1;i<prices.length;i++){
            if(buyAt>prices[i])
            buyAt=prices[i];
            else{
                currprofit=prices[i]-buyAt;
                maxprice=Math.max(currprofit,maxprice);
            }
        }
        return maxprice;
    }
}
  //Brute force//      
     /*   int maxprice=0;
        int currprofit=0;
        for(i=0;i<prices.length;i++)
        for(j=i+1;j<prices.length;j++){
            currprofit=prices[j]-prices[i];
            maxprice=Math.max(maxprice,currprofit);
            }
        return maxprofit;
    }

//42
//most optimal solution//
class Solution {
    public int trap(int[] height) {
        int left=0,right=height.length-1;
        int ans=0;
        int left_max=0,right_max=0;
        while(left<right){
            if(height[left]<height[right]){
                left_max=Math.max(left_max,height[left]);
                ans+=left_max-height[left];
                ++left;
            }
            else{
                right_max=Math.max(right_max,height[right]);
                ans+=right_max-height[right];
                --right;
            }
        }
        return ans;
    }
}

//Brute force method//
      /*  int left=0,right=height.length-1;
        int ans=0;
        int left_max=0,right_max=0;
        while(left<right){
            if (height[left]<height[right]){
                left_max=Math.max(left_max,height[left]);
                ans+=left_max-height[left];
                ++left;
            }
            else{
                right_max=Math.max(right_max,height[right]);
                ans+=right_max-height[right];
                --right;
            }
        }
        return ans;
    }
}*/
       
        /*int totalwater=0;
        for(int i=0;i<height.length;i++){
            int currentlevel=0;
            int currentwater=0;
            int leftgreatest=0,rightgreatest=0;
            for(int j=i-1;j>=0;j--)
                leftgreatest=Math.max(leftgreatest,height[j]);
            for(int j=i+1;j<height.length;j++)
                rightgreatest=Math.min(rightgreatest,height[j]);
                currentlevel=Math.min(rightgreatest,leftgreatest);
                currentwater=currentlevel-height[i];
                if(currentwater>0)*/

