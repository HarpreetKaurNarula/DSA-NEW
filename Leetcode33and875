//33//
class Solution {
    public int search(int[] nums, int target) {
        int low=0,high=nums.length-1;
        while(low<=33high){
            int mid=high-(high-low)/2;
            if(nums[mid]==target) return mid;
            else if(nums[low]<=nums[mid]){
                if(target>=nums[low] && target<=nums[mid])
                high=mid-1;
                else
                low=mid+1;
            }
            else{
                 if(target>=nums[mid] && target<=nums[high])
                low=mid+1;
                else
                high=mid-1;
            }
        }
        return-1;
    }
}

//leetcode 875//
class Solution {
    public int minEatingSpeed(int[] piles, int h) {
        int low=1,high=(int)Math.pow(10,9);
        int ans=high;
        while(low<=high){
            icnt mid=high-(high-low)/2;
            if(check(mid,h,piles)){
                ans=mid;
                high=mid-1;
            }
            else
            low=mid+1;
        }
        return ans;
    }
    public boolean check(int speed,int time,int[] arr){
        int temp_time=0;
        for(int i=0;i<arr.length;i++){
        temp_time+=arr[i]/speed;
        if (arr[i]%speed!=0)
        temp_time+=1;
        }
        return(temp_time<=time);
        
    }
}
           
