//leetcode160//
public class Solution {
    public ListNode getIntersectionNode(ListNode headA, ListNode headB) {
        ListNode a1=headA;
        ListNode a2=headB;
        while(a1!=a2){
            if(a1==null)
            a1=headB;
            else
            a1=a1.next;
            if(a2==null)
            a2=headA;
            else
            a2=a2.next;
        }
        return a1;
    }
}


//leetcode206//
class Solution {
    public ListNode reverseList(ListNode head) {
        return rev(head,null);
        
    }
    public  ListNode rev(ListNode curr,ListNode prev){
        if(curr==null)
        return prev;

        ListNode temp=rev(curr.next,curr);
        curr.next=prev;
        return temp;
    }
}

//leetcode141//
public class Solution {
    public boolean hasCycle(ListNode head) {
        if(head==null || head.next==null)
        return false;
        ListNode hare=head;
        ListNode tort=head;
        
        while(!(hare==null || hare.next==null)){
        hare=hare.next.next;
        tort=tort.next;
        
        if(hare==tort)
        return true;
        }
        return false;
    }
}

//leetcode876//
class Solution {
    public ListNode middleNode(ListNode head) {
        ListNode tort= head;
        ListNode hare= head;

        while(! (hare==null || hare.next== null) ){
            tort = tort.next;
            hare = hare.next.next;
        }

        return tort;
    }
}
