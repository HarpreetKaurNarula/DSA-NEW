//Faculty at CodingBlocks loves to purchase smartphones and decides to play a game. Aayush and Harshit decides to shop for smartphones. Aayush purchases 1 smartphone, then Harshit purchases 2 smartphones, then Aayush purchases 3 smartphones, then Harshit purchases 4 smartphones, and so on. Once someone can't purchase more smartphones, he loses.
Aayush can purchase at most M smartphones and Harshit can purchase at most N smartphones. Who will win ? Print "Aayush" and "Harshit" accordingly.
Input Format
The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. Two integers M and N denoting the maximum possible number of smartphones Aayush and Harshit can purchase respectively.
//
import java.util.*;
public class Main {
    public static void main(String args[]) {
        Scanner scanner = new Scanner(System.in);
        int T = scanner.nextInt();
        while (T-- > 0) {
            int M = scanner.nextInt();
            int N = scanner.nextInt();
            System.out.println(whoWins(M, N));
        }
    }
    
    public static String whoWins(int M, int N) {
        int totalSmartphones = 0;
        int turn = 1;
        while (true)
            if (turn % 2 == 1) {
                if (totalSmartphones + turn > M) {
                    return "Harshit";
            }
            totalSmartphones += turn;
            }
            else {
                if (totalSmartphones + turn > N) {
                    return "Aayush";
                }
                totalSmartphones += turn;
            }
            turn++;
        }
    }
}

//Due to an immense rise in Pollution, Kejriwal is back with the Odd and Even Rule in Delhi. The scheme is as follows, each car will be allowed to run on Sunday if the sum of digits which are even is divisible by 4 or sum of digits which are odd in that number is divisible by 3. However to check every car for the above criteria can't be done by the Delhi Police. You need to help Delhi Police by finding out if a car numbered N will be allowed to run on Sunday
//
import java.util.*;
public class Main {
    public static void main(String args[]) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        for (int i = 0; i < N; i++) {
            int carNumber = scanner.nextInt();
            if (canRunOnSunday(carNumber)) {
                System.out.println("Yes");
            } else {
                System.out.println("No");
            }
        }
    }

    public static boolean canRunOnSunday(int carNumber) {
        int evenSum = 0;
        int oddSum = 0;
        while (carNumber > 0) {
            int digit = carNumber % 10;
            if (digit % 2 == 0) {
                evenSum += digit;
            } else {
                oddSum += digit;
            }
            carNumber /= 10;
        }
        return (evenSum % 4 == 0 || oddSum % 3 == 0);
    }
}

//A number
Write a function which returns true if the number is an armstrong number and false otherwise, where Armstrong number//
//
import java.util.*;
public class Main {
    public static void main(String args[]) {
        Scanner scanner = new Scanner(System.in);
        System.out.println("");
        int num = scanner.nextInt();
        System.out.println(isArmstrong(num));
    }

    public static boolean isArmstrong(int num) {
        int sum = 0;
        int original = num;
        int digits = String.valueOf(num).length();
        while (num > 0) {
            int digit = num % 10;
            sum += Math.pow(digit, digits);
            num /= 10;
        }
        return sum == original;
    }
}

//You will be given an M x N matrix. You task is to print the 2D array in spiral form in clockwise manner.

Input Format
The first line contains two integers M and N denoting the size of the matrix. Next N lines follow each containing M integers denoting the contents of the array.
import java.util.Scanner;
public class Questions{

    public static void main(String[] args){
        Scanner sc=new Scanner(System.in);
        System.out.print("");
        int M=sc.nextInt();
        int N=sc.nextInt();
        int[][] matrix=new int[M][N];
        for(int i=0;i<M;i++){
            for(int j=0;j<N;j++){
                matrix[i][j]=sc.nextInt();
            }
        }
        sc.close();
        spiralsearch(matrix,M,N);
    }
    public static void spiralsearch(int[][] matrix,int M,int N){
        int top=0;
        int bottom=M-1;
        int right=N-1;
        int left=0;
        while(top<=bottom && left<=right){
            for(int i=left;i<=right;i++){
                System.out.print(matrix[top][i]+ "");
            }
            top++;
            for(int i=top;i<=bottom;i++){
                System.out.print(matrix[i][right]+ "");
            }
            right--;
            if(top<=bottom){
                for(int i=right;i>=left;i--){
                    System.out.print(matrix[bottom][i]+ "");
                }
                bottom--;
                
            }
            if(left<=right){
                for(int i=bottom;i>=top;i--){
                    System.out.print(matrix[i][left]+ "");
                }
                left++;
            }
        }
    }
}*/

/*Take as input S, a string. Write a function that returns true if the string is a palindrome and false otherwise. Print the value returned.
import java.util.Scanner;
public class Questions{
    public static void main(String[] args){
        Scanner sc=new Scanner(System.in);
        String S=sc.nextLine();
        sc.close();
        System.out.println(isPalindrome(S));
    }

    public static boolean isPalindrome(String S){
        int left=0;
        int right=S.length()-1;
        while(left<right){
            if(S.charAt(left)!=S.charAt(right)){
                return false;
            }
            left++;
            right--;
        }
        return true;
    }
}

*/Rahul had a sorted array of numbers from which he had to find a given number quickly. His friend by mistake rotated the array. Now Rahul doesn't have time to sort the elements again. Help him to quickly find the given number from the rotated array.

Hint - Think Binary Search!

import java.util.Scanner;
public class Questions{
    public static void main(String[] args){
        Scanner sc=new Scanner(System.in);
        int N=sc.nextInt();
        int[] arr=new int[N];
        for(int i=0;i<N;i++){
            arr[i]=sc.nextInt();
        }
        int target=sc.nextInt();
        sc.close();
        int result=search(arr,target);
        System.out.println(result);
    }
    public static int search(int[] arr,int target){
        int left=0;
        int right=arr.length-1;
        while(left<=right){
            int mid=left+(right-left)/2;
            if(arr[mid]==target){
                return mid;
            }
            if(arr[left]<=arr[mid]){
                if(arr[left]<=target && target<=arr[mid]){
                    right=mid-1;
                }
                else{
                    left=mid+1;
                }
            }
            else{
                if(arr[mid]<=target && target<arr[right]){
                    left=mid+1;
                }
                else{
                    right=mid-1;
                }
            }
        }
        return-1;
        
    }
}
                       
